[project]
name = "turbo-lambda"
version = "0.1.0"
description = "Turbo Lambda Description"
readme = "README.md"
authors = [{ name = "Sam Mosleh", email = "sam.mosleh.d@gmail.com" }]
requires-python = ">=3.12"
dependencies = [
    "orjson>=3.11.3",
    "pydantic-settings>=2.11.0",
]

[dependency-groups]
dev = [
    "coverage>=7.11.0",
    "ipykernel>=7.0.1",
    "mypy>=1.18.2",
    "pytest>=8.4.2",
]

[build-system]
requires = ["uv_build>=0.9.2,<0.10.0"]
build-backend = "uv_build"

[tool.mypy]
plugins = ['pydantic.mypy']

[tool.pytest.ini_options]
xfail_strict = true
testpaths = "tests"
# asyncio_mode = "auto"
addopts = ["--strict-config", "--strict-markers"]
markers = ["slow: marks tests as slow (deselect with '-m \"not slow\"')"]
filterwarnings = ["error"]

[tool.coverage.run]
branch = true
parallel = true
relative_files = true
source = ["src", "tests"]

[tool.coverage.report]
show_missing = true
# skip_covered = true
partial_branches = [
    "# pragma: no cover\\b",
    "# pragma: (nt|posix|cygwin|darwin|linux|msys|win32|cpython|pypy) (no )?cover\\b",
    "# pragma: (>=?|<=?|==|!=)\\d+\\.\\d+ cover\\b",
]
exclude_also = ['case _:\n\s*assert_never\(.*\)']

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "PL",  # pylint
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "Q",   # flake8-quotes
    "T20", # flake8-print
    "S",   # flake8-bandit
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "RUF", # ruff
]
ignore = [
    "E501", # line too long, handled by formatter
    "B008", # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "S311"]

[tool.semantic_release]
commit_parser = "emoji"
commit_message = "🔖 {version}\n\nAutomatically generated by python-semantic-release"
version_toml = ["pyproject.toml:project.version"]
allow_zero_version = true

[tool.semantic_release.commit_parser_options]
major_tags = ["💥"]
minor_tags = ["✨"]
patch_tags = ["🚑️", "🔒️", "🐛", "⚡️"]
